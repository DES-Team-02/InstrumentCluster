/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COMMONAPI_HEAD_UNIT_HPP_
#define V0_COMMONAPI_HEAD_UNIT_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace commonapi {

class HeadUnit {
public:
    virtual ~HeadUnit() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    struct MetaData : CommonAPI::Struct< std::vector< uint8_t >, std::string, std::string> {
    
        MetaData()
        {
            std::get< 0>(values_) = std::vector< uint8_t >();
            std::get< 1>(values_) = "";
            std::get< 2>(values_) = "";
        }
        MetaData(const std::vector< uint8_t > &_albumcover, const std::string &_artist, const std::string &_title)
        {
            std::get< 0>(values_) = _albumcover;
            std::get< 1>(values_) = _artist;
            std::get< 2>(values_) = _title;
        }
        inline const std::vector< uint8_t > &getAlbumcover() const { return std::get< 0>(values_); }
        inline void setAlbumcover(const std::vector< uint8_t > &_value) { std::get< 0>(values_) = _value; }
        inline const std::string &getArtist() const { return std::get< 1>(values_); }
        inline void setArtist(const std::string &_value) { std::get< 1>(values_) = _value; }
        inline const std::string &getTitle() const { return std::get< 2>(values_); }
        inline void setTitle(const std::string &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const MetaData& _other) const {
        return (getAlbumcover() == _other.getAlbumcover() && getArtist() == _other.getArtist() && getTitle() == _other.getTitle());
        }
        inline bool operator!=(const MetaData &_other) const {
            return !((*this) == _other);
        }
    
    };
};

const char* HeadUnit::getInterface() {
    return ("commonapi.HeadUnit:v0_1");
}

CommonAPI::Version HeadUnit::getInterfaceVersion() {
    return CommonAPI::Version(0, 1);
}


} // namespace commonapi
} // namespace v0

namespace CommonAPI {
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COMMONAPI_HEAD_UNIT_HPP_
